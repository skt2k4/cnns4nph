import sys
import nibabel as nib
import os
import numpy as np

def loadimage(f):
    img = nib.load(f)
    img_data = img.get_data()
    return img_data

    

def subsectimage (f, img_data,start,stop,isaxial): 
#function will take an image, slice it, and save it to current directory
    if isaxial:
        for i in range(start,stop+1):
            slice = img_data[: , i, :] # the ith slice, x<=i<=y
            filesave = f[0:5] + '-' + str(i) + '.dat'
            slice.dump(filesave)
    else:
        for i in range(start,stop+1):
            slice = img_data[:,:,i]
            filesave = f[0:5]+'-'+str(i)+'.dat'
            slice.dump(filesave)
            
def imgindexselection(f):
    findex = int(f[1:5])-1
    if isaxial and isnarrowaxial:                    
        fstart = caseindices[findex,1]
        fstop = caseindices[findex,2]
    elif isaxial == True and isnarrowaxial == False:
        fstart = caseindices[findex,0]
        fstop = caseindices[findex,3]
    else:
        fstart = caseindices[findex,4]
        fstop = caseindices[findex,5]
    fstart = int(fstart)
    fstop = int(fstop)
    return fstart, fstop

def reshapelabels(labels):
#Reshape labels into mx3 matrix
#1 = NPH, 2 = AD, 3 = Normal Control
#1 = 100, 2 = 010, 3 = 001
    newlabels = np.empty((0,3))
    for i in labels:
        if i == 1:
            newlabels = np.vstack((newlabels,[1,0,0]))
        if i == 2:
            newlabels = np.vstack((newlabels,[0,1,0]))
        if i == 3:
            newlabels = np.vstack((newlabels,[0,0,1]))
    return newlabels

def caselookup(casenums):
    casepairs = np.empty((0,1))
    for i in casenums: #for every case in casenums
        pairind = np.where(casekey[:,0]==i)[0]#lookup index of i-th case w/in casekey
        # pairind[0] holds index within casekey
        pair = casekey[pairind,1]
        casepairs= np.vstack((casepairs,pair))   
    return casepairs




def main():
# This file will set up the necessary data files to launch the initializer file
# This file is meant to pre-process images
# Dependencies
# - Needs a master/cases directory that holds the raw MRI data, separated into training and validation
# - The validation data need to be in a master/cases/validation folder
# - master/cases must have casesliceindices.csv [guides MRI slice selection] and casekey.csv [maps codes to labels]
# - Needs a master/datasets directory that holds subdirectories that have data for individual subsets

    # Important control variables
    experimentname = 'narrowaxialslices' #holds name of experiment, which is used for creating folders
    isaxial = True
    isnarrowaxial = True
    numpixels = 256 * 256
    fstart = -1
    fstop = -1


    print 'Initializer started' #debugging
    print 'This program preprocesses images'
    print 'This program will process axial slices: ' + str(isaxial)
    print 'This program will process narrow axial slices: ' +str(isnarrowaxial)
    casesfilepath = '/ifs/home/skt275/cases' # holds slices filepath #if debugging, replace /cases w/ /debug
    validationfilepath = casesfilepath + "/validation"
    datasetsfilepath = '/ifs/home/skt275/datasets/'
    experimentfilepath = datasetsfilepath + experimentname
    experimentvalidationfilepath = experimentfilepath + "/validation"
    
    if not os.path.isdir(experimentfilepath): # make experiment filepath if not there
        os.makedirs(experimentfilepath)
        os.makedirs(experimentvalidationfilepath)

    os.chdir(experimentfilepath) 
    if 'validationnums.dat' in os.listdir(experimentfilepath):
        print 'Prior files available'
    else:
        print 'slicing images'
        os.chdir(casesfilepath)
        caseindices = np.genfromtxt('casesliceindices.csv', delimiter=',') #case 1 is indexed as 0, etc

        for f in os.listdir(casesfilepath):
            if f.find('.nii') != -1: #If it's a .nii file
                epi_img_data = loadimage(f)
                if epi_img_data.shape[0] * epi_img_data.shape[1] == numpixels:

##################REVISION STARTED
                    fstart, fstop = imgindexselection(f)
                    os.chdir(experimentfilepath)
                    subsectimage(f,epi_img_data,fstart,fstop, isaxial)
                    os.chdir(casesfilepath)

        os.chdir(validationfilepath)
        for f in os.listdir(validationfilepath):
            if f.find('.nii') != -1: #If it's a .nii file
                epi_img_data = loadimage(f)
                if epi_img_data.shape[0] * epi_img_data.shape[1] == numpixels:
                    fstart, fstop = imgindexselection(f)
                    os.chdir(experimentvalidationfilepath)
                    subsectimage(f,epi_img_data,fstart,fstop, isaxial)
                    os.chdir(validationfilepath)
    
    # This process will flatten all '.dat' files into one matrix and track labels
    # initializations, constants
        flatcasesmatrix = np.empty((0,numpixels))
        flatvalidationmatrix = np.empty((0,numpixels))
        casenums = np.empty((0,1))
        validationnums = np.empty((0,1))
        counter = 0

        os.chdir(experimentfilepath)
        for i in os.listdir(experimentfilepath):
            if '.dat' in i:
                boxdata = np.load(i) # load the data
                if boxdata.shape[0]*boxdata.shape[1]==numpixels:
                    flatdata = boxdata.flatten() # flatten the data
                    flatdata.shape = (1,numpixels) #make the data horizontal
                    flatcasesmatrix = np.vstack((flatcasesmatrix,flatdata)) # flatten data
                    casenums = np.vstack((casenums,int(str(i[1:5])))) # store casenumber
                    counter = counter +1
                '''if counter > 25: break #for debugging'''

        os.chdir(experimentvalidationfilepath)
        for i in os.listdir(experimentvalidationfilepath):
            if '.dat' in i:
                boxdata = np.load(i) # load the data
                if boxdata.shape[0]*boxdata.shape[1]==numpixels:
                    flatdata = boxdata.flatten() # flatten the data
                    flatdata.shape = (1,numpixels) #make the data horizontal
                    flatvalidationmatrix = np.vstack((flatvalidationmatrix,flatdata))
                    validationnums = np.vstack((validationnums,int(str(i[1:5]))))
                    counter = counter +1


        # Reshapes labels
        os.chdir(casesfilepath)
        casekey = np.genfromtxt('casekey.csv',delimiter=',')
        labels = caselookup(casenums) #returns list of labels 
        validationlabels = caselookup(validationnums)
        labels = reshapelabels(labels)
        validationlabels = reshapelabels(validationlabels)


        # Saves the files that get used by tflauncher      
        os.chdir(experimentfilepath)
        np.save('flatcasesmatrix.dat',flatcasesmatrix)
        np.save('flatvalidationmatrix.dat', flatvalidationmatrix)
        casenums.dump('casenums.dat')
        validationlabels.dump('validationlabels.dat')
        labels.dump('labels.dat')

        print 'Output files created and saved'





if __name__ == '__main__':
	main()
