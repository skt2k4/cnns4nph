import sys
import nibabel as nib
import os
import numpy as np
import tensorflow as tf

def main(flatcasesmatrix,labels,flatvalidationmatrix,validationlabels, casenums):
    learning_rate = 0.0001
    training_iters = 100000
    batch_size = 16
    display_step = 100
    holdoutsize = 15

    # Network parameters
    n_input =  65536 # = 256 x 256
    n_classes = 3 #three total classes for classification
    dropout = .5
    useholdout = True
    skipprintinggrad = False
    l2lambda = 2
    tf.logging.set_verbosity(tf.logging.ERROR)

    # tf graph input
    x = tf.placeholder(tf.float32, [None, n_input])
    y = tf.placeholder(tf.float32, [None, n_classes])
    keep_prob = tf.placeholder(tf.float32) #dropout

    # wrappers
    def conv2d(x, W, b, strides=1):
        x = tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME')
        x = tf.nn.bias_add(x, b)
        return tf.nn.relu(x)

    def maxpool2d(x, k=2):
        return tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME')
    
    def batch(x, y, availableindices, batchsize):
        totalsize = availableindices.shape[0]
        indexofavailableindices = np.random.randint(totalsize, size=batchsize)
        indices = availableindices[indexofavailableindices]
        indices = indices.ravel()
        indices = indices.astype(int)
        x_batch = x[indices,:]
        y_batch = y[indices]
        return x_batch, y_batch

    #Batching infrastructure
    allusedslices = set(casenums.flatten())
    allusedslices = list(allusedslices)
    np.random.shuffle(allusedslices)
    holdoutcases = np.asarray(allusedslices[0:holdoutsize])
    trainingcases = np.asarray(allusedslices[holdoutsize + 1:])

    #initialize holdoutindices, trainingindices
    holdoutindices = np.empty((0,1))
    trainingindices = np.empty((0,1))
    #for loop for building holdoutindices
    for i in holdoutcases:
        iindices = np.where(casenums == i)[0]
        iindices = iindices.reshape((-1,1))
        holdoutindices = np.vstack((holdoutindices,iindices))
    
    #for loop for building trainingindices
    for i in trainingcases:
        iindices = np.where(casenums == i)[0]
        iindices = iindices.reshape((-1,1))
        trainingindices = np.vstack((trainingindices,iindices))
    

    validationindices = np.asarray(range(0,validationlabels.shape[0]))


    #model
    def conv_net(x, weights, biases, dropout):
        x = tf.reshape(x, shape=[-1,256,256,1])
    
        #convolution 1
        conv1 = conv2d(x, weights['wc1'], biases['bc1'])
        conv1 = maxpool2d(conv1, k=2)
    
        #convolution 2
        conv2 = conv2d(conv1, weights['wc2'], biases['bc2'])
        conv2 = maxpool2d(conv2, k=2)
    
        #fully connected layer
        #reshape conv2 output to fit fully connected layer
        fc1 = tf.reshape(conv2, [-1, weights['wd1'].get_shape().as_list()[0]])
        fc1 = tf.add(tf.matmul(fc1, weights['wd1']), biases['bd1'])
        fc1 = tf.nn.relu(fc1)
        # apply dropout
        fc1 = tf.nn.dropout(fc1, dropout)
    
        # Output, class prediction
        out = tf.add(tf.matmul(fc1, weights['out']), biases['out'])
        return out

    # Store layers weight and bias
    weights = {
        #5x5 conv, 1 input, 32 outputs
        'wc1': tf.Variable(tf.random_normal([5, 5, 1, 32])),
        # 5x5 conv, 32 inputs, 64 outputs
        'wc2': tf.Variable(tf.random_normal([5, 5, 32, 32])),
        # fully connected, 64*64*64 inputs, 1024 outputs
        'wd1': tf.Variable(tf.random_normal([32*64*64, 1024])),
        # 1024 inputs, 3 outputs
        'out': tf.Variable(tf.random_normal([1024, n_classes]))
    }

    biases = {
        'bc1': tf.Variable(tf.random_normal([32])),
        'bc2': tf.Variable(tf.random_normal([32])),
        'bd1': tf.Variable(tf.random_normal([1024])),
        'out': tf.Variable(tf.random_normal([n_classes]))
    }

    #construct model
    pred = conv_net(x, weights, biases, keep_prob)

    # Define loss and optimizer
    l2_reg = tf.nn.l2_loss(weights['wc1'])+tf.nn.l2_loss(weights['wc2'])+tf.nn.l2_loss(weights['wd1'])+tf.nn.l2_loss(weights['out'])
    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y)) + l2lambda*l2_reg

    optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)

    # Evaluate model
    correct_pred = tf.equal(tf.argmax(pred,1), tf.argmax(y,1))
    accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))
    grads = tf.gradients(cost,[weights['out']])
    gradnorm = tf.norm(grads, ord='euclidean')
    # Initialize variables
    init = tf.global_variables_initializer()
    
    #accuracy log
    acclog = np.empty((0,2))
    
    # Launch graph
    print("starting tensorflow session")
    with tf.Session() as sess:
        sess.run(init)
        step = 1

        while step * batch_size < training_iters:
            batch_x, batch_y = batch(flatcasesmatrix, labels, trainingindices, batch_size) 
            # run optimizer on (backprop)
            sess.run(optimizer, feed_dict={x: batch_x,
                                           y: batch_y, 
                                           keep_prob: dropout})
                                           
            if step % display_step == 0:
                if useholdout:
                    holdout_x, holdout_y = batch(flatcasesmatrix, labels, holdoutindices, 4*batch_size)
                    loss, acc,gradz = sess.run([cost, accuracy,gradnorm], feed_dict={x: holdout_x,
                                                                      y: holdout_y,
                                                                      keep_prob: 1.})

                    if skipprintinggrad:
                        print("Holdout - Iter " + str(step*batch_size) + ", Minibatch Loss= " + \
                            "{:.6f}".format(loss) + ", Training Accuracy= " + \
                            "{:.5f}".format(acc))
                    else:
                        print("Holdout - Iter " + str(step*batch_size) + ", Minibatch Loss= " + \
                            "{:.6f}".format(loss) + ", Training Accuracy= " + \
                            "{:.5f}".format(acc) +", L2 norm of output weight Gradient= " + str(gradz))

                else: # this is for testing on the test set
                    holdout_x, holdout_y = batch(flatvalidationmatrix, validationlabels, validationindices, 4*batch_size)
                    loss, acc = sess.run([cost, accuracy], feed_dict={x: holdout_x,
                                                                      y: holdout_y,
                                                                      keep_prob: 1.})

                    print("Test set - Iter " + str(step*batch_size) + ", Minibatch Loss= " + \
                        "{:.6f}".format(loss) + ", Training Accuracy= " + \
                        "{:.5f}".format(acc))
                
                acclog = np.vstack((acclog,(step*batch_size,acc)))    
                
            step += 1
        print("Optimization finished!")
        acclog.dump('accuracylog.dat')


if __name__ == '__main__':
	main()
